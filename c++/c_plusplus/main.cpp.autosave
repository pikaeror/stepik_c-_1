#include <QCoreApplication>
#include <iostream>
#include <iomanip>
#include <cmath>
#include "clockk.h"

int sum(int value, int sum_v=0) {
    if(std::abs(value) < 1) {
        return sum_v;
    }
    return sum(int(value/10), sum_v + value%10);
}

int next_even_value(int value) {
    if(value % 2 == 0) {
        return value + 2;
    }
    return ++value;
}

int count_of_desk(int person) {
    return ceil(float(person) / 2);
}

std::uint64_t Cost_by_cake(std::uint64_t rub, std::uint64_t kop, std::uint64_t count) {
    std::uint64_t hundrid = 100;
    std::uint64_t k = (rub * count * hundrid);
    std::uint64_t d = (kop * count);
    return k + d;
}

void Print_coast(std::uint64_t coast) {
    std::uint64_t f = coast / 100;
    std::uint64_t rub = floor(f);
    std::cout<<rub<<' '<<coast % 100;
}

int time_by_road(float_t height, float_t up_in_day, float_t down_by_night) {
    float_t time = std::ceil((height - down_by_night) / (up_in_day - down_by_night));
    return time < 1 ? 1 : int(time);
}

int_least64_t Point_on_road(int_least64_t speed, int_least64_t time) {
    int_least64_t len = 109;
    return ((time * speed) % len + len) % len;
}

int_least16_t simmetrick_value(int_least16_t value) {
    if(value == 0) return 1;
    std::string list = std::to_string(value);
    while (list.size() < 4) {
        list = '0' + list;
    }
    for(int i = 0; i < list.size() / 2; i++) {
        if(list[i] != list[list.size() - 1 - i]) return 0;
    }
    return 1;
}

void strcat(char *to, const char *from)
{
    for(;*to == '\0'; to++) {
    }
    for (;*from == '\0'; from++) {
        *to = *from;
        to++;
    }
    return;
}

int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);
    int_least16_t value;
    std::cin>>value;
    std::cout<<simmetrick_value(value);
    return a.exec();
}
